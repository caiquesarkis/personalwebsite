{"Title":"Iteradores Javascript","Description":"Como utilizar iteradores no Javascript moderno ES6","Tags":"Javascript, HTML, Programming","Body":"O que o iterador **forEach** faz? #flashcard  #programing \r\n\r\nEsse método percorre um array, passando cada elemento para uma 'callback function'. Ela não retorna nada.\r\n\r\n```JavaScript\r\nconst numbers = [1,3,4,5];\r\n\r\nconst seeNumbers = numbers.forEach(number => {\r\n\tconsole.log(\"Do you like the number \" + number)\r\n});\r\n```\r\n\r\n---\r\n\r\nO que o iterador **Filter** faz? #flashcard  #programing \r\n\r\n\r\nEsse método retorna apenas os elementos que ao passarem por uma operação lógica retornam `true`\r\n\r\n```javascript\r\nconst randomNumbers = [375, 200, 3.14, 7, 13, 852];\r\n\r\nconst smallNumbers = randomNumbers.filter(randomNumber => {\r\n return randomNumber < 250;\r\n});\r\n```\r\n\r\n---\r\n\r\nO que o iterador **Map** faz? #flashcard  #programing \r\n\r\nEsse método percorre um array e devolve um array no final.\r\n\r\n```javascript\r\nconst numbers = [1,3,4,5];\r\n\r\nconst squared = numbers.map(number => {\r\n\treturn number*number\r\n});\r\n```\r\n\r\nVamos supor a seguinte situação, temos um array com strings e queremos criar dinâmicamente uma lista em  html onde o conteudo serão os elementos do array\r\n``` JavaScript\r\n\t\r\n\tconst colors = ['red','green','blue'];\r\n\tconst items = colors.map(color => `<li>${color}</li>`)\r\n\r\n```\r\n\r\n**colors.map()** é a nova função que permite iterar sobre todo o array um item de cada vez retornando um novo array, dentro do método temos uma função de flecha que recebe cada valor da iteração e coloca dentro do parâmetro color, esse parâmetro é colocado dentro da string através do **template literal** que é uma forma parecida com o python de colocar variaveis dentro de strings, utiliza-se `${variavel}` dentro de ` (``) `."}